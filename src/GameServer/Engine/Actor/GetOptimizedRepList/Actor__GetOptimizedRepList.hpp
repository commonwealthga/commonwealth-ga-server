#pragma once

#include "src/pch.hpp"
#include "src/Utils/HookBase.hpp"
#include "src/GameServer/Utils/Neq.hpp"

class Actor__GetOptimizedRepList : public HookBase<
	int*(__fastcall*)(void*, void*, int, void*, int*, int*, int),
	0x10C5F870,
	Actor__GetOptimizedRepList> {
public:
	static int* __fastcall Call(void* thisxx, void* edx_dummy, int param_1, void* param_2, int* param_3, int* param_4, int param_5);
	static inline int* __fastcall CallOriginal(void* thisxx, void* edx_dummy, int param_1, void* param_2, int* param_3, int* param_4, int param_5) {
		return m_original(thisxx, edx_dummy, param_1, param_2, param_3, param_4, param_5);
	}

	static std::map<std::string, std::map<std::string, bool>> ObjectIsACache;
	static bool ObjectIsA(UObject* obj, const char* ClassFullName);

	static bool bRepListCached;
	static UProperty* ClassProperty_Actor_BasedActors_BaseClass;
	static std::map<int, bool> ClassProperty_Actor_BasedActors_BaseClass_initial;
	static UProperty* ObjectProperty_Actor_PhysicsVolumeChange_NewVolume;
	static std::map<int, bool> ObjectProperty_Actor_PhysicsVolumeChange_NewVolume_initial;
	static UProperty* StructProperty_Engine_Actor_Velocity;
	static std::map<int, bool> StructProperty_Engine_Actor_Velocity_initial;
	static UProperty* ByteProperty_Engine_Actor_RemoteRole;
	static std::map<int, bool> ByteProperty_Engine_Actor_RemoteRole_initial;
	static UProperty* ByteProperty_Engine_Actor_Role;
	static std::map<int, bool> ByteProperty_Engine_Actor_Role_initial;
	static UProperty* BoolProperty_Engine_Actor_bNetOwner;
	static std::map<int, bool> BoolProperty_Engine_Actor_bNetOwner_initial;
	static UProperty* BoolProperty_Engine_Actor_bTearOff;
	static std::map<int, bool> BoolProperty_Engine_Actor_bTearOff_initial;
	static UProperty* FloatProperty_Engine_Actor_DrawScale;
	static std::map<int, bool> FloatProperty_Engine_Actor_DrawScale_initial;
	static UProperty* ByteProperty_Engine_Actor_ReplicatedCollisionType;
	static std::map<int, bool> ByteProperty_Engine_Actor_ReplicatedCollisionType_initial;
	static UProperty* BoolProperty_Engine_Actor_bCollideActors;
	static std::map<int, bool> BoolProperty_Engine_Actor_bCollideActors_initial;
	static UProperty* BoolProperty_Engine_Actor_bCollideWorld;
	static std::map<int, bool> BoolProperty_Engine_Actor_bCollideWorld_initial;
	static UProperty* BoolProperty_Engine_Actor_bBlockActors;
	static std::map<int, bool> BoolProperty_Engine_Actor_bBlockActors_initial;
	static UProperty* BoolProperty_Engine_Actor_bProjTarget;
	static std::map<int, bool> BoolProperty_Engine_Actor_bProjTarget_initial;
	static UProperty* ObjectProperty_GameFramework_GameExplosionActor_InstigatorController;
	static std::map<int, bool> ObjectProperty_GameFramework_GameExplosionActor_InstigatorController_initial;
	static UProperty* ObjectProperty_Engine_Actor_Owner;
	static std::map<int, bool> ObjectProperty_Engine_Actor_Owner_initial;
	static UProperty* BoolProperty_Engine_AmbientSoundSimpleToggleable_bCurrentlyPlaying;
	static std::map<int, bool> BoolProperty_Engine_AmbientSoundSimpleToggleable_bCurrentlyPlaying_initial;
	static UProperty* FloatProperty_Engine_CameraActor_AspectRatio;
	static std::map<int, bool> FloatProperty_Engine_CameraActor_AspectRatio_initial;
	static UProperty* FloatProperty_Engine_CameraActor_FOVAngle;
	static std::map<int, bool> FloatProperty_Engine_CameraActor_FOVAngle_initial;
	static UProperty* BoolProperty_TgPlayerController_PawnPerformanceTest_bEnablePerfTest;
	static std::map<int, bool> BoolProperty_TgPlayerController_PawnPerformanceTest_bEnablePerfTest_initial;
	static UProperty* ObjectProperty_Engine_Controller_PlayerReplicationInfo;
	static std::map<int, bool> ObjectProperty_Engine_Controller_PlayerReplicationInfo_initial;
	static UProperty* BoolProperty_Engine_CrowdAttractor_bAttractorEnabled;
	static std::map<int, bool> BoolProperty_Engine_CrowdAttractor_bAttractorEnabled_initial;
	static UProperty* IntProperty_Engine_CrowdReplicationActor_DestroyAllCount;
	static std::map<int, bool> IntProperty_Engine_CrowdReplicationActor_DestroyAllCount_initial;
	static UProperty* ObjectProperty_Engine_CrowdReplicationActor_Spawner;
	static std::map<int, bool> ObjectProperty_Engine_CrowdReplicationActor_Spawner_initial;
	static UProperty* BoolProperty_Engine_CrowdReplicationActor_bSpawningActive;
	static std::map<int, bool> BoolProperty_Engine_CrowdReplicationActor_bSpawningActive_initial;
	static UProperty* ClassProperty_Engine_DroppedPickup_InventoryClass;
	static std::map<int, bool> ClassProperty_Engine_DroppedPickup_InventoryClass_initial;
	static UProperty* BoolProperty_Engine_DroppedPickup_bFadeOut;
	static std::map<int, bool> BoolProperty_Engine_DroppedPickup_bFadeOut_initial;
	static UProperty* ObjectProperty_Engine_DynamicSMActor_ReplicatedMaterial;
	static std::map<int, bool> ObjectProperty_Engine_DynamicSMActor_ReplicatedMaterial_initial;
	static UProperty* ObjectProperty_Engine_DynamicSMActor_ReplicatedMesh;
	static std::map<int, bool> ObjectProperty_Engine_DynamicSMActor_ReplicatedMesh_initial;
	static UProperty* StructProperty_Engine_DynamicSMActor_ReplicatedMeshRotation;
	static std::map<int, bool> StructProperty_Engine_DynamicSMActor_ReplicatedMeshRotation_initial;
	static UProperty* StructProperty_Engine_DynamicSMActor_ReplicatedMeshScale3D;
	static std::map<int, bool> StructProperty_Engine_DynamicSMActor_ReplicatedMeshScale3D_initial;
	static UProperty* StructProperty_Engine_DynamicSMActor_ReplicatedMeshTranslation;
	static std::map<int, bool> StructProperty_Engine_DynamicSMActor_ReplicatedMeshTranslation_initial;
	static UProperty* BoolProperty_Engine_DynamicSMActor_bForceStaticDecals;
	static std::map<int, bool> BoolProperty_Engine_DynamicSMActor_bForceStaticDecals_initial;
	static UProperty* BoolProperty_Engine_Emitter_bCurrentlyActive;
	static std::map<int, bool> BoolProperty_Engine_Emitter_bCurrentlyActive_initial;
	static UProperty* ObjectProperty_Engine_PhysXEmitterSpawnable_ParticleTemplate;
	static std::map<int, bool> ObjectProperty_Engine_PhysXEmitterSpawnable_ParticleTemplate_initial;
	static UProperty* BoolProperty_Engine_FluidInfluenceActor_bActive;
	static std::map<int, bool> BoolProperty_Engine_FluidInfluenceActor_bActive_initial;
	static UProperty* BoolProperty_Engine_FluidInfluenceActor_bToggled;
	static std::map<int, bool> BoolProperty_Engine_FluidInfluenceActor_bToggled_initial;
	static UProperty* BoolProperty_Engine_FogVolumeDensityInfo_bEnabled;
	static std::map<int, bool> BoolProperty_Engine_FogVolumeDensityInfo_bEnabled_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_MatchID;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_MatchID_initial;
	static UProperty* ObjectProperty_Engine_GameReplicationInfo_Winner;
	static std::map<int, bool> ObjectProperty_Engine_GameReplicationInfo_Winner_initial;
	static UProperty* BoolProperty_Engine_GameReplicationInfo_bMatchHasBegun;
	static std::map<int, bool> BoolProperty_Engine_GameReplicationInfo_bMatchHasBegun_initial;
	static UProperty* BoolProperty_Engine_GameReplicationInfo_bMatchIsOver;
	static std::map<int, bool> BoolProperty_Engine_GameReplicationInfo_bMatchIsOver_initial;
	static UProperty* BoolProperty_Engine_GameReplicationInfo_bStopCountDown;
	static std::map<int, bool> BoolProperty_Engine_GameReplicationInfo_bStopCountDown_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_RemainingMinute;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_RemainingMinute_initial;
	static UProperty* StrProperty_Engine_GameReplicationInfo_AdminEmail;
	static std::map<int, bool> StrProperty_Engine_GameReplicationInfo_AdminEmail_initial;
	static UProperty* StrProperty_Engine_GameReplicationInfo_AdminName;
	static std::map<int, bool> StrProperty_Engine_GameReplicationInfo_AdminName_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_ElapsedTime;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_ElapsedTime_initial;
	static UProperty* ClassProperty_Engine_GameReplicationInfo_GameClass;
	static std::map<int, bool> ClassProperty_Engine_GameReplicationInfo_GameClass_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_GoalScore;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_GoalScore_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_MaxLives;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_MaxLives_initial;
	static UProperty* StrProperty_Engine_GameReplicationInfo_MessageOfTheDay;
	static std::map<int, bool> StrProperty_Engine_GameReplicationInfo_MessageOfTheDay_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_RemainingTime;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_RemainingTime_initial;
	static UProperty* StrProperty_Engine_GameReplicationInfo_ServerName;
	static std::map<int, bool> StrProperty_Engine_GameReplicationInfo_ServerName_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_ServerRegion;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_ServerRegion_initial;
	static UProperty* StrProperty_Engine_GameReplicationInfo_ShortName;
	static std::map<int, bool> StrProperty_Engine_GameReplicationInfo_ShortName_initial;
	static UProperty* IntProperty_Engine_GameReplicationInfo_TimeLimit;
	static std::map<int, bool> IntProperty_Engine_GameReplicationInfo_TimeLimit_initial;
	static UProperty* BoolProperty_Engine_GameReplicationInfo_bIsArbitrated;
	static std::map<int, bool> BoolProperty_Engine_GameReplicationInfo_bIsArbitrated_initial;
	static UProperty* BoolProperty_Engine_GameReplicationInfo_bTrackStats;
	static std::map<int, bool> BoolProperty_Engine_GameReplicationInfo_bTrackStats_initial;
	static UProperty* BoolProperty_Engine_HeightFog_bEnabled;
	static std::map<int, bool> BoolProperty_Engine_HeightFog_bEnabled_initial;
	static UProperty* ObjectProperty_Engine_Inventory_InvManager;
	static std::map<int, bool> ObjectProperty_Engine_Inventory_InvManager_initial;
	static UProperty* ClassProperty_SeqAct_GiveInventory_InventoryList_InventoryList;
	static std::map<int, bool> ClassProperty_SeqAct_GiveInventory_InventoryList_InventoryList_initial;
	static UProperty* ObjectProperty_Engine_InventoryManager_InventoryChain;
	static std::map<int, bool> ObjectProperty_Engine_InventoryManager_InventoryChain_initial;
	static UProperty* StructProperty_Engine_KActor_RBState;
	static std::map<int, bool> StructProperty_Engine_KActor_RBState_initial;
	static UProperty* StructProperty_Engine_KActor_ReplicatedDrawScale3D;
	static std::map<int, bool> StructProperty_Engine_KActor_ReplicatedDrawScale3D_initial;
	static UProperty* BoolProperty_Engine_KActor_bWakeOnLevelStart;
	static std::map<int, bool> BoolProperty_Engine_KActor_bWakeOnLevelStart_initial;
	static UProperty* ObjectProperty_Engine_KAsset_ReplicatedMesh;
	static std::map<int, bool> ObjectProperty_Engine_KAsset_ReplicatedMesh_initial;
	static UProperty* ObjectProperty_Engine_KAsset_ReplicatedPhysAsset;
	static std::map<int, bool> ObjectProperty_Engine_KAsset_ReplicatedPhysAsset_initial;
	static UProperty* BoolProperty_Engine_LensFlareSource_bCurrentlyActive;
	static std::map<int, bool> BoolProperty_Engine_LensFlareSource_bCurrentlyActive_initial;
	static UProperty* BoolProperty_Engine_Light_bEnabled;
	static std::map<int, bool> BoolProperty_Engine_Light_bEnabled_initial;
	static UProperty* ObjectProperty_Engine_MatineeActor_InterpAction;
	static std::map<int, bool> ObjectProperty_Engine_MatineeActor_InterpAction_initial;
	static UProperty* FloatProperty_Engine_MatineeActor_PlayRate;
	static std::map<int, bool> FloatProperty_Engine_MatineeActor_PlayRate_initial;
	static UProperty* FloatProperty_Engine_MatineeActor_Position;
	static std::map<int, bool> FloatProperty_Engine_MatineeActor_Position_initial;
	static UProperty* BoolProperty_Engine_MatineeActor_bIsPlaying;
	static std::map<int, bool> BoolProperty_Engine_MatineeActor_bIsPlaying_initial;
	static UProperty* BoolProperty_Engine_MatineeActor_bPaused;
	static std::map<int, bool> BoolProperty_Engine_MatineeActor_bPaused_initial;
	static UProperty* BoolProperty_Engine_MatineeActor_bReversePlayback;
	static std::map<int, bool> BoolProperty_Engine_MatineeActor_bReversePlayback_initial;
	static UProperty* BoolProperty_Engine_NxForceField_bForceActive;
	static std::map<int, bool> BoolProperty_Engine_NxForceField_bForceActive_initial;
	static UProperty* ObjectProperty_Engine_Pawn_DrivenVehicle;
	static std::map<int, bool> ObjectProperty_Engine_Pawn_DrivenVehicle_initial;
	static UProperty* BoolProperty_Pawn_FlashLocationUpdated_bViaReplication;
	static std::map<int, bool> BoolProperty_Pawn_FlashLocationUpdated_bViaReplication_initial;
	static UProperty* IntProperty_Engine_Pawn_HealthMax;
	static std::map<int, bool> IntProperty_Engine_Pawn_HealthMax_initial;
	static UProperty* ClassProperty_Engine_Pawn_HitDamageType;
	static std::map<int, bool> ClassProperty_Engine_Pawn_HitDamageType_initial;
	static UProperty* ObjectProperty_Engine_Pawn_PlayerReplicationInfo;
	static std::map<int, bool> ObjectProperty_Engine_Pawn_PlayerReplicationInfo_initial;
	static UProperty* StructProperty_Engine_Pawn_TakeHitLocation;
	static std::map<int, bool> StructProperty_Engine_Pawn_TakeHitLocation_initial;
	static UProperty* BoolProperty_Engine_Pawn_bIsWalking;
	static std::map<int, bool> BoolProperty_Engine_Pawn_bIsWalking_initial;
	static UProperty* BoolProperty_Engine_Pawn_bSimulateGravity;
	static std::map<int, bool> BoolProperty_Engine_Pawn_bSimulateGravity_initial;
	static UProperty* FloatProperty_Engine_Pawn_AccelRate;
	static std::map<int, bool> FloatProperty_Engine_Pawn_AccelRate_initial;
	static UProperty* FloatProperty_Engine_Pawn_AirControl;
	static std::map<int, bool> FloatProperty_Engine_Pawn_AirControl_initial;
	static UProperty* FloatProperty_Engine_Pawn_AirSpeed;
	static std::map<int, bool> FloatProperty_Engine_Pawn_AirSpeed_initial;
	static UProperty* ClassProperty_Engine_Pawn_ControllerClass;
	static std::map<int, bool> ClassProperty_Engine_Pawn_ControllerClass_initial;
	static UProperty* FloatProperty_Engine_Pawn_GroundSpeed;
	static std::map<int, bool> FloatProperty_Engine_Pawn_GroundSpeed_initial;
	static UProperty* ObjectProperty_Engine_Pawn_InvManager;
	static std::map<int, bool> ObjectProperty_Engine_Pawn_InvManager_initial;
	static UProperty* FloatProperty_Engine_Pawn_JumpZ;
	static std::map<int, bool> FloatProperty_Engine_Pawn_JumpZ_initial;
	static UProperty* FloatProperty_Engine_Pawn_WaterSpeed;
	static std::map<int, bool> FloatProperty_Engine_Pawn_WaterSpeed_initial;
	static UProperty* BoolProperty_Pawn_FiringModeUpdated_bViaReplication;
	static std::map<int, bool> BoolProperty_Pawn_FiringModeUpdated_bViaReplication_initial;
	static UProperty* BoolProperty_Pawn_FlashCountUpdated_bViaReplication;
	static std::map<int, bool> BoolProperty_Pawn_FlashCountUpdated_bViaReplication_initial;
	static UProperty* BoolProperty_Engine_Pawn_bIsCrouched;
	static std::map<int, bool> BoolProperty_Engine_Pawn_bIsCrouched_initial;
	static UProperty* StructProperty_Engine_Pawn_TearOffMomentum;
	static std::map<int, bool> StructProperty_Engine_Pawn_TearOffMomentum_initial;
	static UProperty* ByteProperty_Engine_Pawn_RemoteViewPitch;
	static std::map<int, bool> ByteProperty_Engine_Pawn_RemoteViewPitch_initial;
	static UProperty* BoolProperty_Engine_PickupFactory_bPickupHidden;
	static std::map<int, bool> BoolProperty_Engine_PickupFactory_bPickupHidden_initial;
	static UProperty* ClassProperty_Engine_PickupFactory_InventoryType;
	static std::map<int, bool> ClassProperty_Engine_PickupFactory_InventoryType_initial;
	static UProperty* FloatProperty_Engine_PlayerController_TargetEyeHeight;
	static std::map<int, bool> FloatProperty_Engine_PlayerController_TargetEyeHeight_initial;
	static UProperty* StructProperty_Engine_PlayerController_TargetViewRotation;
	static std::map<int, bool> StructProperty_Engine_PlayerController_TargetViewRotation_initial;
	static UProperty* FloatProperty_Engine_PlayerReplicationInfo_Deaths;
	static std::map<int, bool> FloatProperty_Engine_PlayerReplicationInfo_Deaths_initial;
	static UProperty* StrProperty_Engine_PlayerReplicationInfo_PlayerAlias;
	static std::map<int, bool> StrProperty_Engine_PlayerReplicationInfo_PlayerAlias_initial;
	static UProperty* ObjectProperty_Engine_PlayerReplicationInfo_PlayerLocationHint;
	static std::map<int, bool> ObjectProperty_Engine_PlayerReplicationInfo_PlayerLocationHint_initial;
	static UProperty* StrProperty_Engine_PlayerReplicationInfo_PlayerName;
	static std::map<int, bool> StrProperty_Engine_PlayerReplicationInfo_PlayerName_initial;
	static UProperty* IntProperty_Engine_PlayerReplicationInfo_PlayerSkill;
	static std::map<int, bool> IntProperty_Engine_PlayerReplicationInfo_PlayerSkill_initial;
	static UProperty* FloatProperty_Engine_PlayerReplicationInfo_Score;
	static std::map<int, bool> FloatProperty_Engine_PlayerReplicationInfo_Score_initial;
	static UProperty* IntProperty_Engine_PlayerReplicationInfo_StartTime;
	static std::map<int, bool> IntProperty_Engine_PlayerReplicationInfo_StartTime_initial;
	static UProperty* ObjectProperty_Engine_PlayerReplicationInfo_Team;
	static std::map<int, bool> ObjectProperty_Engine_PlayerReplicationInfo_Team_initial;
	static UProperty* StructProperty_Engine_PlayerReplicationInfo_UniqueId;
	static std::map<int, bool> StructProperty_Engine_PlayerReplicationInfo_UniqueId_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bAdmin;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bAdmin_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bHasFlag;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bHasFlag_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bIsFemale;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bIsFemale_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bIsSpectator;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bIsSpectator_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bOnlySpectator;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bOnlySpectator_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bOutOfLives;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bOutOfLives_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bReadyToPlay;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bReadyToPlay_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bWaitingPlayer;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bWaitingPlayer_initial;
	static UProperty* ByteProperty_Engine_PlayerReplicationInfo_PacketLoss;
	static std::map<int, bool> ByteProperty_Engine_PlayerReplicationInfo_PacketLoss_initial;
	static UProperty* ByteProperty_Engine_PlayerReplicationInfo_Ping;
	static std::map<int, bool> ByteProperty_Engine_PlayerReplicationInfo_Ping_initial;
	static UProperty* IntProperty_Engine_PlayerReplicationInfo_SplitscreenIndex;
	static std::map<int, bool> IntProperty_Engine_PlayerReplicationInfo_SplitscreenIndex_initial;
	static UProperty* IntProperty_Engine_PlayerReplicationInfo_PlayerID;
	static std::map<int, bool> IntProperty_Engine_PlayerReplicationInfo_PlayerID_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bBot;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bBot_initial;
	static UProperty* BoolProperty_Engine_PlayerReplicationInfo_bIsInactive;
	static std::map<int, bool> BoolProperty_Engine_PlayerReplicationInfo_bIsInactive_initial;
	static UProperty* BoolProperty_Engine_PostProcessVolume_bEnabled;
	static std::map<int, bool> BoolProperty_Engine_PostProcessVolume_bEnabled_initial;
	static UProperty* FloatProperty_Engine_Projectile_MaxSpeed;
	static std::map<int, bool> FloatProperty_Engine_Projectile_MaxSpeed_initial;
	static UProperty* FloatProperty_Engine_Projectile_Speed;
	static std::map<int, bool> FloatProperty_Engine_Projectile_Speed_initial;
	static UProperty* BoolProperty_Engine_RB_CylindricalForceActor_bForceActive;
	static std::map<int, bool> BoolProperty_Engine_RB_CylindricalForceActor_bForceActive_initial;
	static UProperty* ByteProperty_Engine_RB_LineImpulseActor_ImpulseCount;
	static std::map<int, bool> ByteProperty_Engine_RB_LineImpulseActor_ImpulseCount_initial;
	static UProperty* BoolProperty_Engine_RB_RadialForceActor_bForceActive;
	static std::map<int, bool> BoolProperty_Engine_RB_RadialForceActor_bForceActive_initial;
	static UProperty* ByteProperty_Engine_RB_RadialImpulseActor_ImpulseCount;
	static std::map<int, bool> ByteProperty_Engine_RB_RadialImpulseActor_ImpulseCount_initial;
	static UProperty* FloatProperty_Engine_SVehicle_MaxSpeed;
	static std::map<int, bool> FloatProperty_Engine_SVehicle_MaxSpeed_initial;
	static UProperty* StructProperty_Engine_SVehicle_VState;
	static std::map<int, bool> StructProperty_Engine_SVehicle_VState_initial;
	static UProperty* ObjectProperty_Engine_SkeletalMeshActor_ReplicatedMaterial;
	static std::map<int, bool> ObjectProperty_Engine_SkeletalMeshActor_ReplicatedMaterial_initial;
	static UProperty* ObjectProperty_Engine_SkeletalMeshActor_ReplicatedMesh;
	static std::map<int, bool> ObjectProperty_Engine_SkeletalMeshActor_ReplicatedMesh_initial;
	static UProperty* FloatProperty_Engine_TeamInfo_Score;
	static std::map<int, bool> FloatProperty_Engine_TeamInfo_Score_initial;
	static UProperty* IntProperty_Engine_TeamInfo_TeamIndex;
	static std::map<int, bool> IntProperty_Engine_TeamInfo_TeamIndex_initial;
	static UProperty* StrProperty_Engine_TeamInfo_TeamName;
	static std::map<int, bool> StrProperty_Engine_TeamInfo_TeamName_initial;
	static UProperty* StrProperty_Engine_Teleporter_URL;
	static std::map<int, bool> StrProperty_Engine_Teleporter_URL_initial;
	static UProperty* BoolProperty_Engine_Teleporter_bEnabled;
	static std::map<int, bool> BoolProperty_Engine_Teleporter_bEnabled_initial;
	static UProperty* StructProperty_Engine_Teleporter_TargetVelocity;
	static std::map<int, bool> StructProperty_Engine_Teleporter_TargetVelocity_initial;
	static UProperty* BoolProperty_Engine_Teleporter_bChangesVelocity;
	static std::map<int, bool> BoolProperty_Engine_Teleporter_bChangesVelocity_initial;
	static UProperty* BoolProperty_Engine_Teleporter_bChangesYaw;
	static std::map<int, bool> BoolProperty_Engine_Teleporter_bChangesYaw_initial;
	static UProperty* BoolProperty_Engine_Teleporter_bReversesX;
	static std::map<int, bool> BoolProperty_Engine_Teleporter_bReversesX_initial;
	static UProperty* BoolProperty_Engine_Teleporter_bReversesY;
	static std::map<int, bool> BoolProperty_Engine_Teleporter_bReversesY_initial;
	static UProperty* BoolProperty_Engine_Teleporter_bReversesZ;
	static std::map<int, bool> BoolProperty_Engine_Teleporter_bReversesZ_initial;
	static UProperty* BoolProperty_Engine_Vehicle_bDriving;
	static std::map<int, bool> BoolProperty_Engine_Vehicle_bDriving_initial;
	static UProperty* IntProperty_Engine_SVehicle_DriverViewPitch;
	static std::map<int, bool> IntProperty_Engine_SVehicle_DriverViewPitch_initial;
	static UProperty* ObjectProperty_Engine_WorldInfo_Pauser;
	static std::map<int, bool> ObjectProperty_Engine_WorldInfo_Pauser_initial;
	static UProperty* StructProperty_Engine_WorldInfo_ReplicatedMusicTrack;
	static std::map<int, bool> StructProperty_Engine_WorldInfo_ReplicatedMusicTrack_initial;
	static UProperty* FloatProperty_Engine_WorldInfo_TimeDilation;
	static std::map<int, bool> FloatProperty_Engine_WorldInfo_TimeDilation_initial;
	static UProperty* FloatProperty_Engine_WorldInfo_WorldGravityZ;
	static std::map<int, bool> FloatProperty_Engine_WorldInfo_WorldGravityZ_initial;
	static UProperty* BoolProperty_Engine_WorldInfo_bHighPriorityLoading;
	static std::map<int, bool> BoolProperty_Engine_WorldInfo_bHighPriorityLoading_initial;
	static UProperty* ByteProperty_TgGame_TgChestActor_r_eChestState;
	static std::map<int, bool> ByteProperty_TgGame_TgChestActor_r_eChestState_initial;
	static UProperty* BoolProperty_TgGame_TgDeploy_BeaconEntrance_r_bActive;
	static std::map<int, bool> BoolProperty_TgGame_TgDeploy_BeaconEntrance_r_bActive_initial;
	static UProperty* BoolProperty_TgGame_TgDeploy_DestructibleCover_r_bHasFired;
	static std::map<int, bool> BoolProperty_TgGame_TgDeploy_DestructibleCover_r_bHasFired_initial;
	static UProperty* IntProperty_TgGame_TgDeploy_Sensor_r_nSensorAudioWarning;
	static std::map<int, bool> IntProperty_TgGame_TgDeploy_Sensor_r_nSensorAudioWarning_initial;
	static UProperty* IntProperty_TgGame_TgDeploy_Sensor_r_nTouchedPlayerCount;
	static std::map<int, bool> IntProperty_TgGame_TgDeploy_Sensor_r_nTouchedPlayerCount_initial;
	static UProperty* BoolProperty_TgGame_TgDeployable_r_bDelayDeployed;
	static std::map<int, bool> BoolProperty_TgGame_TgDeployable_r_bDelayDeployed_initial;
	static UProperty* IntProperty_TgGame_TgDeployable_r_nReplicateDestroyIt;
	static std::map<int, bool> IntProperty_TgGame_TgDeployable_r_nReplicateDestroyIt_initial;
	static UProperty* ObjectProperty_TgGame_TgDeployable_r_DRI;
	static std::map<int, bool> ObjectProperty_TgGame_TgDeployable_r_DRI_initial;
	static UProperty* BoolProperty_TgGame_TgDeployable_r_bInitialIsEnemy;
	static std::map<int, bool> BoolProperty_TgGame_TgDeployable_r_bInitialIsEnemy_initial;
	static UProperty* BoolProperty_TgGame_TgDeployable_r_bTakeDamage;
	static std::map<int, bool> BoolProperty_TgGame_TgDeployable_r_bTakeDamage_initial;
	static UProperty* FloatProperty_TgGame_TgDeployable_r_fClientProximityRadius;
	static std::map<int, bool> FloatProperty_TgGame_TgDeployable_r_fClientProximityRadius_initial;
	static UProperty* FloatProperty_TgGame_TgDeployable_r_fCurrentDeployTime;
	static std::map<int, bool> FloatProperty_TgGame_TgDeployable_r_fCurrentDeployTime_initial;
	static UProperty* IntProperty_TgGame_TgDeployable_r_nDeployableId;
	static std::map<int, bool> IntProperty_TgGame_TgDeployable_r_nDeployableId_initial;
	static UProperty* IntProperty_TgGame_TgDeployable_r_nPhysicalType;
	static std::map<int, bool> IntProperty_TgGame_TgDeployable_r_nPhysicalType_initial;
	static UProperty* IntProperty_TgGame_TgDeployable_r_nTickingTime;
	static std::map<int, bool> IntProperty_TgGame_TgDeployable_r_nTickingTime_initial;
	static UProperty* ObjectProperty_TgGame_TgDeployable_r_Owner;
	static std::map<int, bool> ObjectProperty_TgGame_TgDeployable_r_Owner_initial;
	static UProperty* IntProperty_TgGame_TgDeployable_r_nOwnerFireMode;
	static std::map<int, bool> IntProperty_TgGame_TgDeployable_r_nOwnerFireMode_initial;
	static UProperty* ByteProperty_TgGame_TgDevice_CurrentFireMode;
	static std::map<int, bool> ByteProperty_TgGame_TgDevice_CurrentFireMode_initial;
	static UProperty* BoolProperty_TgGame_TgDevice_r_bIsStealthDevice;
	static std::map<int, bool> BoolProperty_TgGame_TgDevice_r_bIsStealthDevice_initial;
	static UProperty* ByteProperty_TgGame_TgDevice_r_eEquippedAt;
	static std::map<int, bool> ByteProperty_TgGame_TgDevice_r_eEquippedAt_initial;
	static UProperty* IntProperty_TgGame_TgDevice_r_nInventoryId;
	static std::map<int, bool> IntProperty_TgGame_TgDevice_r_nInventoryId_initial;
	static UProperty* IntProperty_TgGame_TgDevice_r_nMeleeComboSeed;
	static std::map<int, bool> IntProperty_TgGame_TgDevice_r_nMeleeComboSeed_initial;
	static UProperty* BoolProperty_TgGame_TgDevice_r_bConsumedOnDeath;
	static std::map<int, bool> BoolProperty_TgGame_TgDevice_r_bConsumedOnDeath_initial;
	static UProperty* BoolProperty_TgGame_TgDevice_r_bConsumedOnUse;
	static std::map<int, bool> BoolProperty_TgGame_TgDevice_r_bConsumedOnUse_initial;
	static UProperty* IntProperty_TgGame_TgDevice_r_nDeviceId;
	static std::map<int, bool> IntProperty_TgGame_TgDevice_r_nDeviceId_initial;
	static UProperty* IntProperty_TgGame_TgDevice_r_nDeviceInstanceId;
	static std::map<int, bool> IntProperty_TgGame_TgDevice_r_nDeviceInstanceId_initial;
	static UProperty* IntProperty_TgGame_TgDevice_r_nQualityValueId;
	static std::map<int, bool> IntProperty_TgGame_TgDevice_r_nQualityValueId_initial;
	static UProperty* BoolProperty_TgGame_TgDevice_Morale_r_bIsActivelyFiring;
	static std::map<int, bool> BoolProperty_TgGame_TgDevice_Morale_r_bIsActivelyFiring_initial;
	static UProperty* BoolProperty_TgGame_TgDoor_r_bOpen;
	static std::map<int, bool> BoolProperty_TgGame_TgDoor_r_bOpen_initial;
	static UProperty* ByteProperty_TgGame_TgDoorMarker_r_eStatus;
	static std::map<int, bool> ByteProperty_TgGame_TgDoorMarker_r_eStatus_initial;
	static UProperty* IntProperty_TgGame_TgDroppedItem_r_nItemId;
	static std::map<int, bool> IntProperty_TgGame_TgDroppedItem_r_nItemId_initial;
	static UProperty* IntProperty_TgGame_TgDynamicDestructible_r_nDestructibleId;
	static std::map<int, bool> IntProperty_TgGame_TgDynamicDestructible_r_nDestructibleId_initial;
	static UProperty* ObjectProperty_TgGame_TgDynamicDestructible_r_pFactory;
	static std::map<int, bool> ObjectProperty_TgGame_TgDynamicDestructible_r_pFactory_initial;
	static UProperty* StrProperty_TgGame_TgDynamicSMActor_m_sAssembly;
	static std::map<int, bool> StrProperty_TgGame_TgDynamicSMActor_m_sAssembly_initial;
	static UProperty* ObjectProperty_TgGame_TgDynamicSMActor_r_EffectManager;
	static std::map<int, bool> ObjectProperty_TgGame_TgDynamicSMActor_r_EffectManager_initial;
	static UProperty* IntProperty_TgGame_TgDynamicSMActor_r_nHealth;
	static std::map<int, bool> IntProperty_TgGame_TgDynamicSMActor_r_nHealth_initial;
	static UProperty* StructProperty_TgGame_TgEffectManager_r_EventQueue;
	static std::map<int, bool> StructProperty_TgGame_TgEffectManager_r_EventQueue_initial;
	static UProperty* StructProperty_TgGame_TgEffectManager_r_ManagedEffectList;
	static std::map<int, bool> StructProperty_TgGame_TgEffectManager_r_ManagedEffectList_initial;
	static UProperty* ObjectProperty_TgGame_TgEffectManager_r_Owner;
	static std::map<int, bool> ObjectProperty_TgGame_TgEffectManager_r_Owner_initial;
	static UProperty* BoolProperty_TgGame_TgEffectManager_r_bRelevancyNotify;
	static std::map<int, bool> BoolProperty_TgGame_TgEffectManager_r_bRelevancyNotify_initial;
	static UProperty* IntProperty_TgGame_TgEffectManager_r_nInvulnerableCount;
	static std::map<int, bool> IntProperty_TgGame_TgEffectManager_r_nInvulnerableCount_initial;
	static UProperty* IntProperty_TgGame_TgEffectManager_r_nNextQueueIndex;
	static std::map<int, bool> IntProperty_TgGame_TgEffectManager_r_nNextQueueIndex_initial;
	static UProperty* NameProperty_TgGame_TgEmitter_BoneName;
	static std::map<int, bool> NameProperty_TgGame_TgEmitter_BoneName_initial;
	static UProperty* ByteProperty_TgGame_TgFlagCaptureVolume_r_eCoalition;
	static std::map<int, bool> ByteProperty_TgGame_TgFlagCaptureVolume_r_eCoalition_initial;
	static UProperty* ByteProperty_TgGame_TgFlagCaptureVolume_r_nTaskForce;
	static std::map<int, bool> ByteProperty_TgGame_TgFlagCaptureVolume_r_nTaskForce_initial;
	static UProperty* ObjectProperty_TgGame_TgFracturedStaticMeshActor_r_EffectManager;
	static std::map<int, bool> ObjectProperty_TgGame_TgFracturedStaticMeshActor_r_EffectManager_initial;
	static UProperty* IntProperty_TgGame_TgFracturedStaticMeshActor_r_TakeHitNotifier;
	static std::map<int, bool> IntProperty_TgGame_TgFracturedStaticMeshActor_r_TakeHitNotifier_initial;
	static UProperty* FloatProperty_TgGame_TgFracturedStaticMeshActor_r_DamageRadius;
	static std::map<int, bool> FloatProperty_TgGame_TgFracturedStaticMeshActor_r_DamageRadius_initial;
	static UProperty* ClassProperty_TgGame_TgFracturedStaticMeshActor_r_HitDamageType;
	static std::map<int, bool> ClassProperty_TgGame_TgFracturedStaticMeshActor_r_HitDamageType_initial;
	static UProperty* StructProperty_TgGame_TgFracturedStaticMeshActor_r_HitInfo;
	static std::map<int, bool> StructProperty_TgGame_TgFracturedStaticMeshActor_r_HitInfo_initial;
	static UProperty* StructProperty_TgGame_TgFracturedStaticMeshActor_r_vTakeHitLocation;
	static std::map<int, bool> StructProperty_TgGame_TgFracturedStaticMeshActor_r_vTakeHitLocation_initial;
	static UProperty* StructProperty_TgGame_TgFracturedStaticMeshActor_r_vTakeHitMomentum;
	static std::map<int, bool> StructProperty_TgGame_TgFracturedStaticMeshActor_r_vTakeHitMomentum_initial;
	static UProperty* IntProperty_TgGame_TgHexLandMarkActor_r_nMeshAsmId;
	static std::map<int, bool> IntProperty_TgGame_TgHexLandMarkActor_r_nMeshAsmId_initial;
	static UProperty* StrProperty_TgGame_TgInterpActor_r_sCurrState;
	static std::map<int, bool> StrProperty_TgGame_TgInterpActor_r_sCurrState_initial;
	static UProperty* IntProperty_TgGame_TgInventoryManager_r_ItemCount;
	static std::map<int, bool> IntProperty_TgGame_TgInventoryManager_r_ItemCount_initial;
	static UProperty* IntProperty_TgGame_TgKismetTestActor_r_nCurrentTest;
	static std::map<int, bool> IntProperty_TgGame_TgKismetTestActor_r_nCurrentTest_initial;
	static UProperty* IntProperty_TgGame_TgKismetTestActor_r_nFailCount;
	static std::map<int, bool> IntProperty_TgGame_TgKismetTestActor_r_nFailCount_initial;
	static UProperty* IntProperty_TgGame_TgKismetTestActor_r_nPassCount;
	static std::map<int, bool> IntProperty_TgGame_TgKismetTestActor_r_nPassCount_initial;
	static UProperty* BoolProperty_TgGame_TgLevelCamera_r_bEnabled;
	static std::map<int, bool> BoolProperty_TgGame_TgLevelCamera_r_bEnabled_initial;
	static UProperty* ObjectProperty_TgGame_TgMissionObjective_r_ObjectiveAssignment;
	static std::map<int, bool> ObjectProperty_TgGame_TgMissionObjective_r_ObjectiveAssignment_initial;
	static UProperty* BoolProperty_TgGame_TgMissionObjective_r_bHasBeenCapturedOnce;
	static std::map<int, bool> BoolProperty_TgGame_TgMissionObjective_r_bHasBeenCapturedOnce_initial;
	static UProperty* BoolProperty_TgGame_TgMissionObjective_r_bIsActive;
	static std::map<int, bool> BoolProperty_TgGame_TgMissionObjective_r_bIsActive_initial;
	static UProperty* BoolProperty_TgGame_TgMissionObjective_r_bIsLocked;
	static std::map<int, bool> BoolProperty_TgGame_TgMissionObjective_r_bIsLocked_initial;
	static UProperty* BoolProperty_TgGame_TgMissionObjective_r_bIsPending;
	static std::map<int, bool> BoolProperty_TgGame_TgMissionObjective_r_bIsPending_initial;
	static UProperty* ByteProperty_TgGame_TgMissionObjective_r_eOwningCoalition;
	static std::map<int, bool> ByteProperty_TgGame_TgMissionObjective_r_eOwningCoalition_initial;
	static UProperty* ByteProperty_TgGame_TgMissionObjective_r_eStatus;
	static std::map<int, bool> ByteProperty_TgGame_TgMissionObjective_r_eStatus_initial;
	static UProperty* FloatProperty_TgGame_TgMissionObjective_r_fCurrCaptureTime;
	static std::map<int, bool> FloatProperty_TgGame_TgMissionObjective_r_fCurrCaptureTime_initial;
	static UProperty* FloatProperty_TgGame_TgMissionObjective_r_fLastCompletedTime;
	static std::map<int, bool> FloatProperty_TgGame_TgMissionObjective_r_fLastCompletedTime_initial;
	static UProperty* IntProperty_TgGame_TgMissionObjective_r_nOwnerTaskForce;
	static std::map<int, bool> IntProperty_TgGame_TgMissionObjective_r_nOwnerTaskForce_initial;
	static UProperty* IntProperty_TgGame_TgMissionObjective_nObjectiveId;
	static std::map<int, bool> IntProperty_TgGame_TgMissionObjective_nObjectiveId_initial;
	static UProperty* IntProperty_TgGame_TgMissionObjective_nPriority;
	static std::map<int, bool> IntProperty_TgGame_TgMissionObjective_nPriority_initial;
	static UProperty* ByteProperty_TgGame_TgMissionObjective_r_OpenWorldPlayerDefaultRole;
	static std::map<int, bool> ByteProperty_TgGame_TgMissionObjective_r_OpenWorldPlayerDefaultRole_initial;
	static UProperty* BoolProperty_TgGame_TgMissionObjective_r_bUsePendingState;
	static std::map<int, bool> BoolProperty_TgGame_TgMissionObjective_r_bUsePendingState_initial;
	static UProperty* ByteProperty_TgGame_TgMissionObjective_r_eDefaultCoalition;
	static std::map<int, bool> ByteProperty_TgGame_TgMissionObjective_r_eDefaultCoalition_initial;
	static UProperty* ObjectProperty_TgGame_TgMissionObjective_Bot_r_ObjectiveBot;
	static std::map<int, bool> ObjectProperty_TgGame_TgMissionObjective_Bot_r_ObjectiveBot_initial;
	static UProperty* ObjectProperty_TgGame_TgMissionObjective_Bot_r_ObjectiveBotInfo;
	static std::map<int, bool> ObjectProperty_TgGame_TgMissionObjective_Bot_r_ObjectiveBotInfo_initial;
	static UProperty* ObjectProperty_TgGame_TgMissionObjective_Escort_r_AttachedActor;
	static std::map<int, bool> ObjectProperty_TgGame_TgMissionObjective_Escort_r_AttachedActor_initial;
	static UProperty* FloatProperty_TgGame_TgMissionObjective_Proximity_r_fCaptureRate;
	static std::map<int, bool> FloatProperty_TgGame_TgMissionObjective_Proximity_r_fCaptureRate_initial;
	static UProperty* ObjectProperty_TgGame_TgObjectiveAssignment_r_AssignedObjective;
	static std::map<int, bool> ObjectProperty_TgGame_TgObjectiveAssignment_r_AssignedObjective_initial;
	static UProperty* ObjectProperty_TgGame_TgObjectiveAssignment_r_Attackers;
	static std::map<int, bool> ObjectProperty_TgGame_TgObjectiveAssignment_r_Attackers_initial;
	static UProperty* ObjectProperty_TgGame_TgObjectiveAssignment_r_Bots;
	static std::map<int, bool> ObjectProperty_TgGame_TgObjectiveAssignment_r_Bots_initial;
	static UProperty* ObjectProperty_TgGame_TgObjectiveAssignment_r_Defenders;
	static std::map<int, bool> ObjectProperty_TgGame_TgObjectiveAssignment_r_Defenders_initial;
	static UProperty* ByteProperty_TgGame_TgObjectiveAssignment_r_eState;
	static std::map<int, bool> ByteProperty_TgGame_TgObjectiveAssignment_r_eState_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsBot;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsBot_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsHenchman;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsHenchman_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bNeedPlaySpawnFx;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bNeedPlaySpawnFx_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fMakeVisibleIncreased;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fMakeVisibleIncreased_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nAllianceId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nAllianceId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nBodyMeshAsmId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nBodyMeshAsmId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nBotRankValueId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nBotRankValueId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nFlashEvent;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nFlashEvent_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nFlashFireInfo;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nFlashFireInfo_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nFlashQueIndex;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nFlashQueIndex_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nPawnId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nPawnId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nPhysicalType;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nPhysicalType_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nPreyProfileType;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nPreyProfileType_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nProfileId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nProfileId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nProfileTypeValueId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nProfileTypeValueId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nSoundGroupId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nSoundGroupId_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_vFlashLocation;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_vFlashLocation_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_vFlashRayDir;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_vFlashRayDir_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_vFlashRefireTime;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_vFlashRefireTime_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_vFlashSituationalAttack;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_vFlashSituationalAttack_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_EquipDeviceInfo;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_EquipDeviceInfo_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bInitialIsEnemy;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bInitialIsEnemy_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_bMadeSound;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_bMadeSound_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_eDesiredInHand;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_eDesiredInHand_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_eEquippedInHandMode;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_eEquippedInHandMode_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nReplicateHit;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nReplicateHit_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_ControlPawn;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_ControlPawn_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_CurrentOmegaVolume;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_CurrentOmegaVolume_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_CurrentSubzoneBilboardVol;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_CurrentSubzoneBilboardVol_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_CurrentSubzoneVol;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_CurrentSubzoneVol_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_ScannerSettings;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_ScannerSettings_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_UIClockState;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_UIClockState_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_UIClockTime;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_UIClockTime_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_UITextBox1MessageID;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_UITextBox1MessageID_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_UITextBox1Packet;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_UITextBox1Packet_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_UITextBox1Time;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_UITextBox1Time_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_UITextBox2MessageID;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_UITextBox2MessageID_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_UITextBox2Packet;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_UITextBox2Packet_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_UITextBox2Time;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_UITextBox2Time_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bAllowAddMoralePoints;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bAllowAddMoralePoints_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bDisableAllDevices;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bDisableAllDevices_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bEnableCrafting;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bEnableCrafting_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bEnableEquip;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bEnableEquip_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bEnableSkills;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bEnableSkills_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bInCombatFlag;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bInCombatFlag_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bInGlobalOffhandCooldown;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bInGlobalOffhandCooldown_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fCurrentPowerPool;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fCurrentPowerPool_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fCurrentServerMoralePoints;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fCurrentServerMoralePoints_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fMaxControlRange;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fMaxControlRange_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fMaxPowerPool;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fMaxPowerPool_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fMoraleRechargeRate;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fMoraleRechargeRate_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fRequiredMoralePoints;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fRequiredMoralePoints_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fSkillRating;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fSkillRating_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nCurrency;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nCurrency_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nHZPoints;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nHZPoints_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nMoraleDeviceSlot;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nMoraleDeviceSlot_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nRestDeviceSlot;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nRestDeviceSlot_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nToken;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nToken_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nXp;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nXp_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_DistanceToPushback;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_DistanceToPushback_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_EffectManager;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_EffectManager_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_FlightAcceleration;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_FlightAcceleration_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_HangingRotation;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_HangingRotation_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_Owner;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_Owner_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_Pet;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_Pet_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_PlayAnimation;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_PlayAnimation_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_PushbackDirection;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_PushbackDirection_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_Target;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_Target_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_TargetActor;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_TargetActor_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_aDebugDestination;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_aDebugDestination_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_aDebugNextNav;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_aDebugNextNav_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_r_aDebugTarget;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_r_aDebugTarget_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_bAimType;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_bAimType_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bAimingMode;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bAimingMode_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bCallingForHelp;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bCallingForHelp_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsAFK;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsAFK_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsAnimInStrafeMode;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsAnimInStrafeMode_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsCrafting;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsCrafting_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsCrewing;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsCrewing_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsDecoy;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsDecoy_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsGrappleDismounting;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsGrappleDismounting_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsHacked;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsHacked_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsHacking;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsHacking_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsHangingDismounting;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsHangingDismounting_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsInSnipeScope;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsInSnipeScope_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsRappelling;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsRappelling_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bIsStealthed;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bIsStealthed_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bJumpedFromHanging;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bJumpedFromHanging_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bPostureIgnoreTransition;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bPostureIgnoreTransition_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bResistTagging;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bResistTagging_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bShouldKnockDownAnimFaceDown;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bShouldKnockDownAnimFaceDown_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bTagEnemy;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bTagEnemy_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_r_bUsingBinoculars;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_r_bUsingBinoculars_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_eCurrentStunType;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_eCurrentStunType_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_eDeathReason;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_eDeathReason_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_eEmoteLength;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_eEmoteLength_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_eEmoteRepnotify;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_eEmoteRepnotify_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_eEmoteUpdate;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_eEmoteUpdate_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_r_ePosture;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_r_ePosture_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fDeployRate;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fDeployRate_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fFrictionMultiplier;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fFrictionMultiplier_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fGravityZModifier;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fGravityZModifier_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fKnockDownTimeRemaining;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fKnockDownTimeRemaining_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fMakeVisibleFadeRate;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fMakeVisibleFadeRate_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fPostureRateScale;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fPostureRateScale_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fRappelGravityModifier;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fRappelGravityModifier_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_r_fStealthTransitionTime;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_r_fStealthTransitionTime_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_fWeightBonus;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_fWeightBonus_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_iKnockDownFlash;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_iKnockDownFlash_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nApplyStealth;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nApplyStealth_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nBotSoundCueId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nBotSoundCueId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nDebugAggroRange;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nDebugAggroRange_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nDebugFOV;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nDebugFOV_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nDebugHearingRange;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nDebugHearingRange_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nDebugSightRange;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nDebugSightRange_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nGenericAIEventIndex;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nGenericAIEventIndex_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nHealthMaximum;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nHealthMaximum_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nNumberTimesCrewed;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nNumberTimesCrewed_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nPhase;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nPhase_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nPitchOffset;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nPitchOffset_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nReplicateDying;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nReplicateDying_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nResetCharacter;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nResetCharacter_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nSensorAlertLevel;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nSensorAlertLevel_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nShieldHealthMax;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nShieldHealthMax_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nShieldHealthRemaining;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nShieldHealthRemaining_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nSilentMode;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nSilentMode_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nStealthAggroRange;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nStealthAggroRange_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nStealthDisabled;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nStealthDisabled_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nStealthSensorRange;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nStealthSensorRange_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nStealthTypeCode;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nStealthTypeCode_initial;
	static UProperty* IntProperty_TgGame_TgPawn_r_nYawOffset;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_r_nYawOffset_initial;
	static UProperty* StrProperty_TgGame_TgPawn_r_sDebugAction;
	static std::map<int, bool> StrProperty_TgGame_TgPawn_r_sDebugAction_initial;
	static UProperty* StrProperty_TgGame_TgPawn_r_sDebugName;
	static std::map<int, bool> StrProperty_TgGame_TgPawn_r_sDebugName_initial;
	static UProperty* StrProperty_TgGame_TgPawn_r_sFactory;
	static std::map<int, bool> StrProperty_TgGame_TgPawn_r_sFactory_initial;
	static UProperty* StructProperty_TgGame_TgPawn_r_vDown;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_r_vDown_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_Ambush_r_bIsDeployed;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_Ambush_r_bIsDeployed_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_AttackTransport_r_DeathType;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_AttackTransport_r_DeathType_initial;
	static UProperty* StructProperty_TgGame_TgPawn_CTR_r_CustomCharacterAssembly;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_CTR_r_CustomCharacterAssembly_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_CTR_r_PilotPawn;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_CTR_r_PilotPawn_initial;
	static UProperty* IntProperty_TgGame_TgPawn_CTR_r_nMaxMorphIndexSentFromServer;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_CTR_r_nMaxMorphIndexSentFromServer_initial;
	static UProperty* IntProperty_TgGame_TgPawn_CTR_r_nMorphSettings;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_CTR_r_nMorphSettings_initial;
	static UProperty* StructProperty_TgGame_TgPawn_Character_r_CustomCharacterAssembly;
	static std::map<int, bool> StructProperty_TgGame_TgPawn_Character_r_CustomCharacterAssembly_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_Character_r_eAttachedMesh;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_Character_r_eAttachedMesh_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nBoostTimeRemaining;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nBoostTimeRemaining_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nHeadMeshAsmId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nHeadMeshAsmId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nItemProfileId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nItemProfileId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nItemProfileNbr;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nItemProfileNbr_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nMaxMorphIndexSentFromServer;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nMaxMorphIndexSentFromServer_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nMorphSettings;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nMorphSettings_initial;
	static UProperty* ObjectProperty_TgGame_TgPawn_Character_r_CurrentVanityPet;
	static std::map<int, bool> ObjectProperty_TgGame_TgPawn_Character_r_CurrentVanityPet_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_Character_r_WallJumpUpperLineCheckOffset;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_Character_r_WallJumpUpperLineCheckOffset_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_Character_r_WallJumpZ;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_Character_r_WallJumpZ_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_Character_r_bElfGogglesEquipped;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_Character_r_bElfGogglesEquipped_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nDeviceSlotUnlockGrpId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nDeviceSlotUnlockGrpId_initial;
	static UProperty* IntProperty_TgGame_TgPawn_Character_r_nSkillGroupSetId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_Character_r_nSkillGroupSetId_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_DuneCommander_r_bDoCrashLanding;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_DuneCommander_r_bDoCrashLanding_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_Iris_r_nStartNewScan;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_Iris_r_nStartNewScan_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_Reaper_r_fBatteryPct;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_Reaper_r_fBatteryPct_initial;
	static UProperty* ByteProperty_TgGame_TgPawn_Siege_r_AccelDirection;
	static std::map<int, bool> ByteProperty_TgGame_TgPawn_Siege_r_AccelDirection_initial;
	static UProperty* BoolProperty_TgGame_TgPawn_Turret_r_bIsDeployed;
	static std::map<int, bool> BoolProperty_TgGame_TgPawn_Turret_r_bIsDeployed_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_Turret_r_fInitDeployTime;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_Turret_r_fInitDeployTime_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_Turret_r_fTimeToDeploySecs;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_Turret_r_fTimeToDeploySecs_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_Turret_r_fCurrentDeployTime;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_Turret_r_fCurrentDeployTime_initial;
	static UProperty* FloatProperty_TgGame_TgPawn_Turret_r_fDeployMaxHealthPCT;
	static std::map<int, bool> FloatProperty_TgGame_TgPawn_Turret_r_fDeployMaxHealthPCT_initial;
	static UProperty* IntProperty_TgGame_TgPawn_VanityPet_r_nSpawningItemId;
	static std::map<int, bool> IntProperty_TgGame_TgPawn_VanityPet_r_nSpawningItemId_initial;
	static UProperty* ByteProperty_TgGame_TgPlayerController_r_WatchOtherPlayer;
	static std::map<int, bool> ByteProperty_TgGame_TgPlayerController_r_WatchOtherPlayer_initial;
	static UProperty* BoolProperty_TgGame_TgPlayerController_r_bEDDebugEffects;
	static std::map<int, bool> BoolProperty_TgGame_TgPlayerController_r_bEDDebugEffects_initial;
	static UProperty* BoolProperty_TgGame_TgPlayerController_r_bGMInvisible;
	static std::map<int, bool> BoolProperty_TgGame_TgPlayerController_r_bGMInvisible_initial;
	static UProperty* BoolProperty_TgGame_TgPlayerController_r_bIsHackingABot;
	static std::map<int, bool> BoolProperty_TgGame_TgPlayerController_r_bIsHackingABot_initial;
	static UProperty* BoolProperty_TgGame_TgPlayerController_r_bLockYawRotation;
	static std::map<int, bool> BoolProperty_TgGame_TgPlayerController_r_bLockYawRotation_initial;
	static UProperty* BoolProperty_TgGame_TgPlayerController_r_bRove;
	static std::map<int, bool> BoolProperty_TgGame_TgPlayerController_r_bRove_initial;
	static UProperty* StructProperty_TgGame_TgProj_Grapple_r_vTargetLocation;
	static std::map<int, bool> StructProperty_TgGame_TgProj_Grapple_r_vTargetLocation_initial;
	static UProperty* ObjectProperty_TgGame_TgProj_Missile_r_aSeeking;
	static std::map<int, bool> ObjectProperty_TgGame_TgProj_Missile_r_aSeeking_initial;
	static UProperty* StructProperty_TgGame_TgProj_Missile_r_vTargetWorldLocation;
	static std::map<int, bool> StructProperty_TgGame_TgProj_Missile_r_vTargetWorldLocation_initial;
	static UProperty* IntProperty_TgGame_TgProj_Missile_r_nNumBounces;
	static std::map<int, bool> IntProperty_TgGame_TgProj_Missile_r_nNumBounces_initial;
	static UProperty* ByteProperty_TgGame_TgProj_Rocket_FlockIndex;
	static std::map<int, bool> ByteProperty_TgGame_TgProj_Rocket_FlockIndex_initial;
	static UProperty* BoolProperty_TgGame_TgProj_Rocket_bCurl;
	static std::map<int, bool> BoolProperty_TgGame_TgProj_Rocket_bCurl_initial;
	static UProperty* ObjectProperty_TgGame_TgProjectile_r_Owner;
	static std::map<int, bool> ObjectProperty_TgGame_TgProjectile_r_Owner_initial;
	static UProperty* FloatProperty_TgGame_TgProjectile_r_fAccelRate;
	static std::map<int, bool> FloatProperty_TgGame_TgProjectile_r_fAccelRate_initial;
	static UProperty* FloatProperty_TgGame_TgProjectile_r_fDuration;
	static std::map<int, bool> FloatProperty_TgGame_TgProjectile_r_fDuration_initial;
	static UProperty* FloatProperty_TgGame_TgProjectile_r_fRange;
	static std::map<int, bool> FloatProperty_TgGame_TgProjectile_r_fRange_initial;
	static UProperty* IntProperty_TgGame_TgProjectile_r_nOwnerFireModeId;
	static std::map<int, bool> IntProperty_TgGame_TgProjectile_r_nOwnerFireModeId_initial;
	static UProperty* IntProperty_TgGame_TgProjectile_r_nProjectileId;
	static std::map<int, bool> IntProperty_TgGame_TgProjectile_r_nProjectileId_initial;
	static UProperty* StructProperty_TgGame_TgProjectile_r_vSpawnLocation;
	static std::map<int, bool> StructProperty_TgGame_TgProjectile_r_vSpawnLocation_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Beacon_r_bDeployed;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Beacon_r_bDeployed_initial;
	static UProperty* StructProperty_TgGame_TgRepInfo_Beacon_r_vLoc;
	static std::map<int, bool> StructProperty_TgGame_TgRepInfo_Beacon_r_vLoc_initial;
	static UProperty* StrProperty_TgGame_TgRepInfo_Beacon_r_nName;
	static std::map<int, bool> StrProperty_TgGame_TgRepInfo_Beacon_r_nName_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_Deployable_r_InstigatorInfo;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_Deployable_r_InstigatorInfo_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_Deployable_r_TaskforceInfo;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_Deployable_r_TaskforceInfo_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Deployable_r_bOwnedByTaskforce;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Deployable_r_bOwnedByTaskforce_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Deployable_r_nHealthCurrent;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Deployable_r_nHealthCurrent_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_Deployable_r_DeployableOwner;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_Deployable_r_DeployableOwner_initial;
	static UProperty* FloatProperty_TgGame_TgRepInfo_Deployable_r_fDeployMaxHealthPCT;
	static std::map<int, bool> FloatProperty_TgGame_TgRepInfo_Deployable_r_fDeployMaxHealthPCT_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Deployable_r_nDeployableId;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Deployable_r_nDeployableId_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Deployable_r_nHealthMaximum;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Deployable_r_nHealthMaximum_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Deployable_r_nUniqueDeployableId;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Deployable_r_nUniqueDeployableId_initial;
	static UProperty* StructProperty_TgGame_TgRepInfo_Game_r_MiniMapInfo;
	static std::map<int, bool> StructProperty_TgGame_TgRepInfo_Game_r_MiniMapInfo_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bActiveCombat;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bActiveCombat_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bAllowBuildMorale;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bAllowBuildMorale_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bAllowPlayerRelease;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bAllowPlayerRelease_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bDefenseAlarm;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bDefenseAlarm_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bInOverTime;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bInOverTime_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsTutorialMap;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsTutorialMap_initial;
	static UProperty* FloatProperty_TgGame_TgRepInfo_Game_r_fGameSpeedModifier;
	static std::map<int, bool> FloatProperty_TgGame_TgRepInfo_Game_r_fGameSpeedModifier_initial;
	static UProperty* FloatProperty_TgGame_TgRepInfo_Game_r_fMissionRemainingTime;
	static std::map<int, bool> FloatProperty_TgGame_TgRepInfo_Game_r_fMissionRemainingTime_initial;
	static UProperty* FloatProperty_TgGame_TgRepInfo_Game_r_fServerTimeLastUpdate;
	static std::map<int, bool> FloatProperty_TgGame_TgRepInfo_Game_r_fServerTimeLastUpdate_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nMaxRoundNumber;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nMaxRoundNumber_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nMissionTimerStateChange;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nMissionTimerStateChange_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nRaidAttackerRespawnBonus;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nRaidAttackerRespawnBonus_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nRaidDefenderRespawnBonus;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nRaidDefenderRespawnBonus_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nReleaseDelay;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nReleaseDelay_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nRoundNumber;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nRoundNumber_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nSecsToAutoReleaseAttackers;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nSecsToAutoReleaseAttackers_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nSecsToAutoReleaseDefenders;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nSecsToAutoReleaseDefenders_initial;
	static UProperty* ByteProperty_TgGame_TgRepInfo_Game_r_GameType;
	static std::map<int, bool> ByteProperty_TgGame_TgRepInfo_Game_r_GameType_initial;
	static UProperty* StructProperty_TgGame_TgRepInfo_Game_r_MapLogoResIds;
	static std::map<int, bool> StructProperty_TgGame_TgRepInfo_Game_r_MapLogoResIds_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_Game_r_Objectives;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_Game_r_Objectives_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsArena;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsArena_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsMatch;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsMatch_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsMission;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsMission_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsPVP;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsPVP_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsRaid;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsRaid_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsTerritoryMap;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsTerritoryMap_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Game_r_bIsTraining;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Game_r_bIsTraining_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nAutoKickTimeout;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nAutoKickTimeout_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nPointsToWin;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nPointsToWin_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Game_r_nVictoryBonusLives;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Game_r_nVictoryBonusLives_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_GameOpenWorld_r_GameTickets;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_GameOpenWorld_r_GameTickets_initial;
	static UProperty* StructProperty_TgGame_TgRepInfo_Player_r_ApproxLocation;
	static std::map<int, bool> StructProperty_TgGame_TgRepInfo_Player_r_ApproxLocation_initial;
	static UProperty* StructProperty_TgGame_TgRepInfo_Player_r_CustomCharacterAssembly;
	static std::map<int, bool> StructProperty_TgGame_TgRepInfo_Player_r_CustomCharacterAssembly_initial;
	static UProperty* StructProperty_TgGame_TgRepInfo_Player_r_EquipDeviceInfo;
	static std::map<int, bool> StructProperty_TgGame_TgRepInfo_Player_r_EquipDeviceInfo_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_Player_r_MasterPrep;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_Player_r_MasterPrep_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_Player_r_PawnOwner;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_Player_r_PawnOwner_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_Scores;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_Scores_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_Player_r_TaskForce;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_Player_r_TaskForce_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_Player_r_bDropped;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_Player_r_bDropped_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_eBonusType;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_eBonusType_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_nCharacterId;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_nCharacterId_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_nHealthCurrent;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_nHealthCurrent_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_nHealthMaximum;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_nHealthMaximum_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_nLevel;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_nLevel_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_nProfileId;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_nProfileId_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_Player_r_nTitleMsgId;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_Player_r_nTitleMsgId_initial;
	static UProperty* StrProperty_TgGame_TgRepInfo_Player_r_sAgencyName;
	static std::map<int, bool> StrProperty_TgGame_TgRepInfo_Player_r_sAgencyName_initial;
	static UProperty* StrProperty_TgGame_TgRepInfo_Player_r_sAllianceName;
	static std::map<int, bool> StrProperty_TgGame_TgRepInfo_Player_r_sAllianceName_initial;
	static UProperty* StrProperty_TgGame_TgRepInfo_Player_r_sOrigPlayerName;
	static std::map<int, bool> StrProperty_TgGame_TgRepInfo_Player_r_sOrigPlayerName_initial;
	static UProperty* StructProperty_TgGame_TgRepInfo_Player_r_DeviceStats;
	static std::map<int, bool> StructProperty_TgGame_TgRepInfo_Player_r_DeviceStats_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_TaskForce_r_BeaconManager;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_TaskForce_r_BeaconManager_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_TaskForce_r_CurrActiveObjective;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_TaskForce_r_CurrActiveObjective_initial;
	static UProperty* ObjectProperty_TgGame_TgRepInfo_TaskForce_r_ObjectiveAssignment;
	static std::map<int, bool> ObjectProperty_TgGame_TgRepInfo_TaskForce_r_ObjectiveAssignment_initial;
	static UProperty* BoolProperty_TgGame_TgRepInfo_TaskForce_r_bBotOwned;
	static std::map<int, bool> BoolProperty_TgGame_TgRepInfo_TaskForce_r_bBotOwned_initial;
	static UProperty* ByteProperty_TgGame_TgRepInfo_TaskForce_r_eCoalition;
	static std::map<int, bool> ByteProperty_TgGame_TgRepInfo_TaskForce_r_eCoalition_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_TaskForce_r_nCurrentPointCount;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_TaskForce_r_nCurrentPointCount_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_TaskForce_r_nLeaderCharId;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_TaskForce_r_nLeaderCharId_initial;
	static UProperty* FloatProperty_TgGame_TgRepInfo_TaskForce_r_nLookingForMembers;
	static std::map<int, bool> FloatProperty_TgGame_TgRepInfo_TaskForce_r_nLookingForMembers_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_TaskForce_r_nNumDeaths;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_TaskForce_r_nNumDeaths_initial;
	static UProperty* ByteProperty_TgGame_TgRepInfo_TaskForce_r_nTaskForce;
	static std::map<int, bool> ByteProperty_TgGame_TgRepInfo_TaskForce_r_nTaskForce_initial;
	static UProperty* IntProperty_TgGame_TgRepInfo_TaskForce_r_nTeamId;
	static std::map<int, bool> IntProperty_TgGame_TgRepInfo_TaskForce_r_nTeamId_initial;
	static UProperty* FloatProperty_TgGame_TgSkydiveTarget_m_LandRadius;
	static std::map<int, bool> FloatProperty_TgGame_TgSkydiveTarget_m_LandRadius_initial;
	static UProperty* FloatProperty_TgGame_TgSkydivingVolume_r_PawnGravityModifier;
	static std::map<int, bool> FloatProperty_TgGame_TgSkydivingVolume_r_PawnGravityModifier_initial;
	static UProperty* FloatProperty_TgGame_TgSkydivingVolume_r_PawnLaunchForce;
	static std::map<int, bool> FloatProperty_TgGame_TgSkydivingVolume_r_PawnLaunchForce_initial;
	static UProperty* FloatProperty_TgGame_TgSkydivingVolume_r_PawnUpForce;
	static std::map<int, bool> FloatProperty_TgGame_TgSkydivingVolume_r_PawnUpForce_initial;
	static UProperty* ObjectProperty_TgGame_TgSkydivingVolume_r_SkydiveTarget;
	static std::map<int, bool> ObjectProperty_TgGame_TgSkydivingVolume_r_SkydiveTarget_initial;
	static UProperty* IntProperty_TgGame_TgTeamBeaconManager_r_BeaconDestroyed;
	static std::map<int, bool> IntProperty_TgGame_TgTeamBeaconManager_r_BeaconDestroyed_initial;
	static UProperty* ObjectProperty_TgGame_TgTeamBeaconManager_r_BeaconHolder;
	static std::map<int, bool> ObjectProperty_TgGame_TgTeamBeaconManager_r_BeaconHolder_initial;
	static UProperty* ObjectProperty_TgGame_TgTeamBeaconManager_r_BeaconInfo;
	static std::map<int, bool> ObjectProperty_TgGame_TgTeamBeaconManager_r_BeaconInfo_initial;
	static UProperty* ByteProperty_TgGame_TgTeamBeaconManager_r_BeaconStatus;
	static std::map<int, bool> ByteProperty_TgGame_TgTeamBeaconManager_r_BeaconStatus_initial;
	static UProperty* ObjectProperty_TgGame_TgTeamBeaconManager_r_TaskForce;
	static std::map<int, bool> ObjectProperty_TgGame_TgTeamBeaconManager_r_TaskForce_initial;
	static UProperty* ByteProperty_TgGame_TgTimerManager_r_byEventQueIndex;
	static std::map<int, bool> ByteProperty_TgGame_TgTimerManager_r_byEventQueIndex_initial;
	static UProperty* FloatProperty_TgGame_TgTimerManager_r_fRemaining;
	static std::map<int, bool> FloatProperty_TgGame_TgTimerManager_r_fRemaining_initial;
	static UProperty* FloatProperty_TgGame_TgTimerManager_r_fStartTime;
	static std::map<int, bool> FloatProperty_TgGame_TgTimerManager_r_fStartTime_initial;
};


// uint32_t* __fastcall Mine_Actor_GetOptimizedRepList(void* thisxx, void* edx_dummy, int param_1, void* param_2, int* param_3, int* param_4, int param_5) {
